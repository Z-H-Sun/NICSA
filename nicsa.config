#!/usr/bin/env python
ATOMS = {'B': (192, (1., .710, .710, 1.)), 'C': (170, (.467, .467, .467, 1.)),
'N': (155, (.631, .631, 1., 1.)), 'O': (152, (.796, 0., 0., 1.)),
'F': (147, (.776, 1., .071, 1.)), 'AL': (184, (.812, .651, .651, 1.)),
'SI': (210, (.820, .839, .549, 1.)), 'P': (180, (1., .580, .129, 1.)),
'S': (180, (.796, .208, 1., 1.)), 'CL': (175, (.267, 1., .227, 1.)),
'GA': (187, (.761, .561, .561, 1.)), 'GE': (211, (.400, .561, .561, 1.)),
'AS': (185, (.741, .502, .890, 1.)), 'SE': (190, (1., .631, 0., 1.)),
'BR': (185, (.745, .501, .235, 1.)), 'SN': (217, (.400, .502, .502, 1.)),
'SB': (206, (.620, .388, .710, 1.)), 'TE': (206, (.831, .478, 0., 1.)),
'I': (198, (.600, .600, 1., 1.)), 'BI': (207, (.620, .310, .710, 1.)),
'OTHER': (170, (1., 0., 1., 1.)), 'BQ': (120, (.081, .311, .537, 1.)), 'highlight': (0, .75, 0, 1)} # vdw radii (in pm) and colors
BOND_LIMIT = 1.8 # the maximum distance (in anstrom) between atoms for a bond to be considered as "existing"
COMPONENTS = [True, True, True, True, True, False] # set which component(s) to be visible: Bonds, Labels, Planes, H's, Bq's, Axes
COMMAND = '# nmr=giao b3lyp/6-311+g(2d,p)' # Gaussian keywords of a NICS calculation

# This file is in nature python script, which will be executed before the main function runs
# So you can monkey patch the main program here. Below are examples
# This section is experimental and may be unstable. In the future, it may be moved into the main program. Please comment these lines out if they cause trouble
FIGURE_SIZE = (5.5, 5.5) # the default size of the figure window (in inches)
CONSOLE_WINDOW_AT_BOTTOM = False # For Windows only: Whether to place the console window below the figure window or on the right side of it

if os.name == 'nt': os.system('chcp 65001 >nul') # Change code page to UTF-8
# Change default backend
if get_backend() == 'MacOSX': use('TkAgg') # Use preferentially TkAgg over MacOSX
backend = get_backend()
from matplotlib.pyplot import switch_backend
try: switch_backend('Qt5Agg') # Use preferentially Qt5Agg over TkAgg
except: switch_backend(backend)

# Change default figure window title, size and position
import matplotlib.pyplot as plt
oriFig = plt.figure # alias of the original func
def newFig(**k):
  fig = oriFig(figsize=FIGURE_SIZE) # define default window size here
  if get_backend() not in ('TkAgg', 'Qt5Agg', 'Qt4Agg', 'WXAgg'): return fig
  win = fig.canvas.manager.window
  title = os.path.basename(filename) + ' - NICS_Automator'
  # move the window to the top-left corner of the screen and set figure title
  # https://stackoverflow.com/a/37999370/11979352
  if get_backend() == 'TkAgg':
    if os.name == 'nt': hwnd = int(win.frame(), 16)
    else: win.wm_geometry(win.wm_geometry().split('+')[0]+'+0+0'); win.winfo_toplevel().title(title)
  elif get_backend() == 'Qt5Agg' or get_backend() == 'Qt4Agg':
    if os.name == 'nt': hwnd = int(win.winId())
    else: win.move(0, 0); win.setWindowTitle(title)
  #elif get_backend() == 'WXAgg':
  #  if os.name == 'nt': hwnd = win.GetHandle()
  #  else: win.SetPosition(0, 0)
  # for windows only: move the console window and set figure title
  if os.name == 'nt':
    import ctypes
    ctypes.windll.user32.SetWindowPos(hwnd, 0, 0, 0, 0, 0, 5) # move the figure window
    ctypes.windll.user32.SetWindowTextA(hwnd, title.encode('mbcs')) # set figure title as filename
    flush_events()
    class RECT(ctypes.Structure):
      _fields_ = [("left", ctypes.c_long), ("top", ctypes.c_long), ("right", ctypes.c_long), ("bottom", ctypes.c_long)]
    rect = RECT()
    ctypes.windll.user32.GetWindowRect(hwnd,ctypes.byref(rect))
    hwnd_c = ctypes.windll.kernel32.GetConsoleWindow()
    if CONSOLE_WINDOW_AT_BOTTOM: ctypes.windll.user32.SetWindowPos(hwnd_c, 0, 0, rect.bottom, 0, 0, 5)
    else: ctypes.windll.user32.SetWindowPos(hwnd_c, 0, rect.right, 0, 0, 0, 5)
  return fig
plt.figure = newFig
